import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.runners.JUnit4;
import java.util.*; 
import java.util.stream.Collectors; 
import java.util.stream.Stream; 
import java.util.stream.IntStream; 
import java.util.Comparator;

public class SolutionTest {
    @Test
    public void sampleTests() {
       
        String[] test={ 
                  "123\n"+
                   "456\n"+
                   "789",
                   
                   "010\n"+
                   "010\n"+
                   "010",
                 
                   "010\n"+
                   "101\n"+
                   "010",
                 
                   "0707\n"+
                   "7070\n"+
                   "0707\n"+
                   "7070",
                 
                   "700000\n"+
                   "077770\n"+
                   "077770\n"+
                   "077770\n"+
                   "077770\n"+
                   "000007",
                 
                   "777000\n"+
                   "007000\n"+
                   "007000\n"+
                   "007000\n"+
                   "007000\n"+
                   "007777",
                 
                   "000000\n"+
                   "000000\n"+
                   "000000\n"+
                   "000010\n"+
                   "000109\n"+
                   "001010",
                   
                   "82\n"+ //sol was 10
                   "46",
                   
                  "2043\n"+
                  "7699\n"+
                  "9423\n"+
                  "8234",
                  
                  "400\n"+
                  "792\n"+
                  "133\n",
                  
                  "30\n"+
                  "76",
                  
                  "84\n"+
                  "69",
                  
                  "2880\n"+
                  "0023\n"+
                  "7908\n"+
                  "0279",
                  
                  "92795\n"+
                  "54751\n"+
                  "07991\n"+
                  "71814\n"+
                  "93819\n",
                  
                  "5741\n"+
                  "9403\n"+
                  "9765\n"+
                  "8933",
                
                  "70534\n"+
                  "77639\n"+
                  "13063\n"+
                  "42191\n"+
                  "00167\n",
                  
                  "6454\n"+
                  "5127\n"+
                  "2991\n"+
                  "0551",
                  
                  "7789\n"+
                  "5483\n"+
                  "4205\n"+
                  "8909",
                  
                  "054\n"+
                  "389\n"+
                  "605",
                  
                  "137844\n"+
                  "252010\n"+
                  "232512\n"+
                  "447954\n"+
                  "817920\n"+
                  "267026",
                  
                  "6265495752919\n"+
                  "0551224671560\n"+
                  "9459702422062\n"+
                  "7142180645194\n"+
                  "2403486296033\n"+
                  "3380332520412\n"+
                  "6270038992585\n"+
                  "7458214068954\n"+
                  "5123785730326\n"+
                  "6796370609566\n"+
                  "5794952016579\n"+
                  "8352973577956\n"+
                  "7202533358108",
                  
                  "3954397\n"+
                  "4069232\n"+
                  "5717849\n"+
                  "3035517\n"+
                  "6537737\n"+
                  "8744492\n"+
                  "3877720",
                  
                  "91351114\n"+
                  "63823747\n"+
                  "69968295\n"+
                  "41620023\n"+
                  "22813109\n"+
                  "03706083\n"+
                  "79017701\n"+
                  "19024796",
                  
                  "23667125176099019\n"+
                  "45403952645644721\n"+
                  "56408262872769747\n"+
                  "84208977807961343\n"+
                  "09679326237527628\n"+
                  "01887043720236486\n"+
                  "93960197848947486\n"+
                  "15196222690151024\n"+
                  "56273798226834032\n"+
                  "95343868533182915\n"+
                  "44953178823312891\n"+
                  "47739204868433734\n"+
                  "34897541964237978\n"+
                  "90659679356794361\n"+
                  "18803019021821736\n"+
                  "10211760985137304\n"+
                  "70925744679183077\n",
                      
                  "5786800995596137740854966452722988\n"+
                  "8147453142784786261124763051076570\n"+
                  "4383587477915185153045205949630390\n"+
                  "2280034420933956655182605902782016\n"+
                  "5103549979216631129267753910930331\n"+
                  "8885687731705506100420336626263920\n"+
                  "2398996483705695807418271575416831\n"+
                  "0623867514622895590469137235320704\n"+
                  "5955888880089549780039634696904510\n"+
                  "9598130595005178704763256386650410\n"+
                  "6441518787121400983590331529971595\n"+
                  "3908649863400323846855422869842710\n"+
                  "4016968472489530754719060614145141\n"+
                  "3068401619653816876345196572303963\n"+
                  "8798731620578322325788136224281455\n"+
                  "7623071359035567268763339233792951\n"+
                  "3061206949119118024105669202424614\n"+
                  "1652227941904679850039030515222974\n"+
                  "3612072887284403117256450999326685\n"+
                  "1427057180028432396167814535100621\n"+
                  "8598039725928619218657241644756398\n"+
                  "3780381117646374186090531811279823\n"+
                  "5121046490457265521262578336032727\n"+
                  "5160097580559165378458255476250233\n"+
                  "3019261592485981691272245398172480\n"+
                  "7260151183057998955427339713683880\n"+
                  "9094817772450895605951596040746959\n"+
                  "9139284932866260974936037144596871\n"+
                  "0348597761353958737898695393412097\n"+
                  "3183357101206752015331412347759811\n"+
                  "5615911519012826790014926589624900\n"+
                  "5917919512206907887022992883713497\n"+
                  "7307297845242380713532418967175486\n"+
                  "2538867882698168169845067464504053"
                  };
     
      for(String s:test){          
           assertEquals(Finder.pathFinderB(s),  Finder.pathFinder(s));
      }
       int n=50;
       Stream.iterate(0,i->i+1).limit(n).forEach(i->{
                                          String s=IntStream.range(0,i)
                                                   .mapToObj(x->IntStream.range(0,i)
                                                                          .map(j->(int)(Math.random()*10))
                                                                          .mapToObj(String::valueOf) 
                                                                          .collect(Collectors.joining(""))
                                                  ).collect(Collectors.joining("\n"));
                                          System.out.println(s);
                                          System.out.println();
                                          assertEquals(Finder.pathFinderB(s),  Finder.pathFinder(s));
                                         });
    }
}
