import java.util.*; 
import java.util.stream.Stream; 
import java.util.stream.IntStream; 

public class Finder {
    public static boolean[][] deepCopyIntMatrix(boolean[][] input) {
        if (input == null)
            return null;
        boolean[][] result = new boolean[input.length][];
        for (int r = 0; r < input.length; r++) {
            result[r] = input[r].clone();
        }
        return result;
    }
    static int path(int x,int y,int maze[][],boolean visited[][],int n){
     
        visited[x][y]=true;
        boolean[][] v;
        int ret=Integer.MAX_VALUE/2;
          /* for(boolean a[]:visited){
            for(boolean b:a){
                System.out.print(b);
            }
            System.out.println();
        }
         System.out.println();*/
        if(x==0||x==n-1){ // top outer column 
              int dir=-1;
              if(x==0) {
                  dir=1;
              }
              if(!visited[x+dir][y]){  //Can I visit South
                    v= deepCopyIntMatrix(visited);
                     ret=Math.min(ret,path(x+dir,y,maze,v,n)+Math.abs(maze[x][y]-maze[x+dir][y]));
              }
              if(y>0&&y<n-1){
                  if(!visited[x][y+1]){ //Can I visit East
                        v= deepCopyIntMatrix(visited);
                        ret=Math.min(ret,path(x,y+1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y+1]));
                  }
                  if(!visited[x][y-1]){ //Can I visit West
                      v= deepCopyIntMatrix(visited);
                     ret=Math.min(ret,path(x,y-1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y-1]));
                  }
                
              }
              else{
                    if(x==n-1&&y==n-1){
                        return 0;
                    }
                    else{
                        if(y==n-1){
                            if(!visited[x][y-1]){//Can I visit West
                                 v= deepCopyIntMatrix(visited);
                                 ret=Math.min(ret,path(x,y-1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y-1]));
                            }
                        }
                        else{
                              if(y==0){
                                   if(!visited[x][y+1]){//Can I visit East
                                   v= deepCopyIntMatrix(visited);
                                   ret=Math.min(ret,path(x,y+1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y+1]));
                                  }
                            }
                        }
                   }
              }
        }
        else{
                // System.out.println("n:"+n+" x: "+x+" y: "+y);
                  if(!visited[x+1][y]){  //Can I visit North
                     v= deepCopyIntMatrix(visited);
                     ret=Math.min(ret,path(x+1,y,maze,v,n)+Math.abs(maze[x][y]-maze[x+1][y]));
                  }
                  if(!visited[x-1][y]){  //Can I visit South
                     v= deepCopyIntMatrix(visited);
                     ret=Math.min(ret,path(x-1,y,maze,v,n)+Math.abs(maze[x][y]-maze[x-1][y]));
                  }
                  
                  if(y>0&&y<n-1){
                       
                          if(!visited[x][y+1]){ //Can I visit East
                             v= deepCopyIntMatrix(visited);
                            ret=Math.min(ret,path(x,y+1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y+1]));
                          }
                          if(!visited[x][y-1]){ //Can I visit West
                             v= deepCopyIntMatrix(visited);
                            ret=Math.min(ret,path(x,y-1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y-1]));
                          }
                  }
                  else{
                      if(y==n-1){
                          if(!visited[x][y-1]){//Can I visit West
                                v= deepCopyIntMatrix(visited);
                               ret=Math.min(ret,path(x,y-1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y-1]));
                          }
                      }
                      else{
                            if(y==0){
                                 if(!visited[x][y+1]){//Can I visit East
                                 v= deepCopyIntMatrix(visited);
                                 ret=Math.min(ret,path(x,y+1,maze,v,n)+Math.abs(maze[x][y]-maze[x][y+1]));
                                }
                          }
                      }
                  }
        }
         //System.out.println(ret);
        
        return ret;
    }
    static void displayIntArr(int [][] intArr){
           Arrays.stream(intArr).forEach(
            line-> {
                  Arrays.stream(line).forEach(System.out::print);
                  System.out.println();
            }
        );
    }
    
    static int[][] initIntArr(String maze){
          return Arrays.stream(maze.split("\n"))
                       .map(line->Arrays.stream(line.split("")).mapToInt(Integer::valueOf).toArray())
                       .toArray(int[][]::new);
        
    }
    
    static int pathFinder(String maze) {
        if(maze.length()>1){
            // Your code here!!
             int[][] mazeInt=initIntArr(maze);
             boolean visited[][]=new boolean[mazeInt.length][mazeInt.length];
           //  System.out.println(mazeInt.length);
            // displayIntArr(mazeInt);
            return  path(0,0,mazeInt,visited,mazeInt.length);
        }
        return 0;
    }
}
