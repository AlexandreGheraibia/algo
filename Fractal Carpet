import java.util.*;


/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/


// Builder Pattern
class Point {
    private long x,y;

    private static class Builder{
        private final long x,y;
        public Builder(){
            x=0;
            y=0;
        }
        public Builder(Point toCopyFrom){
                x=toCopyFrom.x();
                y=toCopyFrom.y();
        }

        public Builder(long val,long val2){
            x=val;
            y=val2;
        }
        
        Point build(){
            return new Point(this);
        }
    
    }
    
    private Point(Builder b){
            x=b.x;
            y=b.y;
    }
    
    //not in the pattern
    public static Point newObj(){
        return new Builder().build();
    }

    public static Point newObj(long x, long y){
        return new Builder(x,y).build();
    } 
    
    public static Point copyFrom(Point p){
        return new Builder(p).build();
    }
        
    public Point x(long val){
        x=val;
        return this ;
    }

    public Point y(long val){
        y=val;
        return this;
    }

    public long x(){
        return  x;
    }

    public long y(){
        return y;
    }
    
    public long deltaX(Point p){
        return  deltaX(this,p);
    }

    public long deltaY(Point p){
        return  deltaY(this,p);
    }

    static public long deltaX(Point p,Point p1){    
        return p.x>p1.x?p.x-p1.x:p1.x-p.x;
    }

    static public long deltaY(Point p,Point p1){    
        return p.y>p1.y?p.y-p1.y:p1.y-p.y;
    }

    @Override
    public String toString(){
            return x+" "+y+"\n";
    }
}

// Builder Pattern
class Square{

    private Point p1,p2;

    private static class Builder{

        private final Point p1,p2;

        Builder(Point v1,Point v2){
            p1=v1;
            p2=v2;
        }
        
        Square build(){
            return new Square(this);
        }

    }
    
    private Square(Builder b){
        p1=b.p1;
        p2=b.p2;
    }

    //not in the pattern
    static public Square newObj(Point p1, Point p2){
            return new Builder(p1,p2).build();
    } 

    public Boolean contain(Point p){
        return contain(p,this.p1,this.p2);
    }
    
    public boolean contain(long x, long y){
        return contain(x,y,this.p1,this.p2);
    }
    
    static public boolean contain(long x,long y, Point p1,Point p2){
        return contain(x, y, p1.x(), p1.y(), p2.x(), p2.y());
    }

    static public boolean contain(Point p,Point p1,Point p2){
        return contain(p.x(), p.y(), p1, p2);
    }

    static public boolean contain(long x, long y, long x1, long y1, long x2, long y2){
        return contains(x, y, x1, y1, (x2-x1)>0?(x2-x1):(x1-x2),(y2-y1)>0?(y2-y1):(y1-y2));
    }

    static public boolean contain(Point p, Point p1, long size){
        return contain(p.x(),p.y(), p1.x(), p1.y(), size);
    }

    static public boolean contain(Point p, long x1, long y1, long size){
        return contain(p.x(),p.y(), x1, y1, size);
    }

    static public boolean contain(long x, long y, long x1, long y1, long size){
        return contains(x, y, x1, y1, size,size);
    }

    static public boolean contains(long x, long y, long x1, long y1, long sizeX,long sizeY){
        return x>=x1&&x<x1+sizeX&&y>=y1&&y<y1+sizeY;
    }
    
    public Square p1(Point p){
        p1=p; return this;
    }

    public Square p2(Point p){
        p2=p; return this;
    }

    public Point p1(){
        return p1;
    }

    public Point p2(){
        return p2;
    }

}

class Solution {

    
    static int [][] map;
    static int padding=0;

    public static void display(boolean b){
        
        for(int i=padding;i<map.length-padding;i++){
            for(int j=padding;j<map[0].length-padding;j++){
                if(b){
                    System.out.print(map[i][j]==0?'0':'+');
                }
                else{
                    System.err.print(map[i][j]==0?'0':'+');
                }
            }
            if(b){
                System.out.println();
            }
            else{
                System.err.println();
            }
            
        }
            
    }

    public static void affect(Point p,long length,Square s){
        
        long l=length;  
        Point p1=Point.copyFrom(s.p1()),p2=Point.copyFrom(s.p2());

        if(p2.x()>p.x()+l||p2.x()==p.x()){
            p2.x(p.x()+l);
        }

        p2.x(p2.deltaX(p1));    
       
        if(p2.y()>=p.y()+l||p2.y()==p.y()){
            p2.y(p.y()+l);
        }
        
        p2.y(p2.deltaY(p1));    
     
        if(p1.x()<=p.x()){
           p1.x(p1.deltaX(p)); 
        }
        else{
             p1.x(0); 
        }
       
        if(p1.y()<=p.y()){
            p1.y(p1.deltaY(p));
        }
        else{
             p1.y(0); 
        }

        for(long i=p1.y();i<Math.min(p2.y(),map.length);i++){
             for(long j=p1.x();j<Math.min(p2.x(),map[0].length);j++){
               map[(int)(i)][(int)(j)]=1;
            }     
        }
    }

   
    public static void walkthroughSquare(Point p,long size,long level,Square s){
        long subSize=size/3;       
        if(level!=0){
            Point p3 =Point.newObj();
            Point p4 =Point.newObj();
            Point p5 =Point.newObj();
            Point p6 =Point.newObj();
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++){
                    p3.x(p.x()+i*subSize).y(p.y()+j*subSize);
                    p4.x(p3.x()+subSize).y(p3.y());
                    p5.x(p3.x()).y(p3.y()+subSize);
                    p6.x(p3.x()+subSize).y(p3.y()+subSize);
                    if(s.contain(p3)||s.contain(p4)||s.contain(p5)||s.contain(p6)
                        ||Square.contain(s.p1(),p3,subSize)||Square.contain(s.p2(),p3,subSize)){
                        if(!(i==1&&j==1)){
                            walkthroughSquare(p3,subSize,level-1,s);
                        } 
                        else{
                            affect(p3,subSize,s);
                        }    
                    }
                }
            }
        }
    }

    static long powerN(long number, int power){
    //https://stackoverflow.com/questions/29996070/using-int-double-and-long-in-calculation-of-powers
        long res = 1;
        long sq = number;
        while(power > 0){
            if(power % 2 == 1){
                res *= sq; 
            }
            sq = sq * sq;
            power /= 2;
        }
        return res;
    }       
    
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int L = in.nextInt();
        long x1 = in.nextLong();
        long y1 = in.nextLong();
        long x2 = in.nextLong();
        long y2 = in.nextLong();
        long sideSize= powerN(3,L);
        Point p1,p2;
        padding=10;
        p1= Point.newObj(x1-padding,y1-padding);
        p2= Point.newObj(x2+padding,y2+padding);
        int l=(int)p1.deltaY(p2)+1,c=(int)p1.deltaX(p2)+1;
        map=new int[l][c];
        Square s=Square.newObj(p1, p2);
        walkthroughSquare(Point.newObj(0,0),sideSize,L,s);  
        display(true);
        
    }
}
