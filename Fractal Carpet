import java.util.*;


/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/


// Builder Pattern
class Point {
        private long x,y;

        private static class Builder{
            private final long x,y;
            public Builder(long val,long val2){
                x=val;
                y=val2;
            }
            Point build(){
                return new Point(this);
            }
        }
        //not in the pattern
        public static Point newObj(long x, long y){
            return new Builder(x,y).build();
        } 
        public Point x(long val){
            x=val;
            return this ;
        }

        public Point y(long val){
            y=val;
            return this;
        }

        public long x(){
            return  x;
        }

        public long y(){
            return y;
        }

        private Point(Builder b){
                x=b.x;
                y=b.y;
        }
        @Override
        public String toString(){
                return x+" "+y+"\n";
        }
}
// Builder Pattern
class Square{

        private Point p1,p2;

        private static class Builder{
            private final Point p1,p2;
            Builder(Point v1,Point v2){
                p1=v1;
                p2=v2;
             }
             Square build(){
                 return new Square(this);
             }
        }
        //not in the pattern
        static public Square newObj(Point p1, Point p2){
                return new Builder(p1,p2).build();
        } 

        private Square(Builder b){
            p1=b.p1;
            p2=b.p2;
        }
        
        public Boolean contain(Point p){
          /*  System.err.println(p1.x()+" "+p1.y());
            System.err.println(p.x()+" "+p.y());
            System.err.println(p2.x()+" "+p2.y());
            System.err.println(contain(p,this.p1,this.p2));
            System.err.println();*/
            return contain(p,this.p1,this.p2);
        }

        public Boolean contain(long x, long y){
            return contain(x,y,this.p1,this.p2);
        }

        
        static public Boolean contain(long x,long y, Point p1,Point p2){
            return contain(x, y, p1.x(), p1.y(), p2.x(), p2.y());
        }

        static public Boolean contain(Point p,Point p1,Point p2){
            return contain(p.x(), p.y(), p1, p2);
        }

        static public Boolean contain(long x, long y, long x1, long y1, long x2, long y2){
            boolean b=x>=x1&&x<=x2&&y>=y1&&y<=y2;
             return b;
        }

        static public Boolean contain(Point p, Point p1, long size){
            return contain(p.x(),p.y(), p1.x(), p1.y(), size);
        }
        static public Boolean contain(Point p, long x1, long y1, long size){
            return contain(p.x(),p.y(), x1, y1, size);
        }

        static public Boolean contain(long x, long y, long x1, long y1, long size){
           boolean b= x>=x1&&x<=x1+size&&y>=y1&&y<=y1+size;
           return b;
        }

        public Square p1(Point p){
            p1=p; return this;
        }
        public Square p2(Point p){
            p2=p; return this;
        }

        public Point p1(){
            return p1;
        }
        public Point p2(){
            return p2;
        }

}

class Solution {

    
 
    public static void draw(Point p,long length,Square s,char c){
        
        for(long i=0;i<length*3;i++){
             for(long j=0;j<length*3;j++){
                 if(i>length-1&&j>length-1&&i<2*length&&j<2*length){
                    System.err.print(c);
                 }
                 else{
                    System.err.print('0');
                 }
               
            }
             System.err.print('\n');
        }
            
    }

   
    public static void dealWithSquare(Point p,long size,long level,Square s){
        long subSize=size/3;
        Point p3=Point.newObj(p.x()+subSize,p.y()+subSize);
         if(s.contain(p3)
         ||Square.contain(s.p1(),p3,subSize)
         ||Square.contain(s.p2(),p3,subSize)){
             draw(p3,subSize,s,'+');
         }
        

        if(level!=0){
            long l,c;
            for(int j=0;j<9;j++){
                    l=(long)Math.floor(j/3);
                    c=j%3;
                    p3.x(p.x()+l*subSize).y(p.y()+c*subSize);
                    dealWithSquare(p3,subSize,level-1,s);
                        
                    
            }
        }
    }
    
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int L = in.nextInt();
        long x1 = in.nextLong();
        long y1 = in.nextLong();
        long x2 = in.nextLong();
        long y2 = in.nextLong();
        
        long sideSize=(long)Math.pow(3,L);
        
        //int [][] map=new int[sideSize][sideSize];
        Point p1,p2;
        p1= Point.newObj(x1,y1);
        p2= Point.newObj(x2,y2);
        Square s=Square.newObj(p1, p2);
        dealWithSquare(Point.newObj(0,0),sideSize,L,s);
        System.err.println(L);
        System.err.println("p1.x: "+p1.x()+" P1.y:"+p1.y());
        System.err.println("p2.x: "+p2.x()+" P2.y:"+p2.y());
        System.err.println("sideSize: "+sideSize);
        
        
      
       
    }
}
